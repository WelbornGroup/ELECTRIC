/**

\mainpage

\section mainpage_overview_sec Overview

The MolSSI Driver Interface (MDI) seeks to simplify the process of interoperating computational molecular sciences codes.
MDI uses a driver/engine paradigm in which \ref main_doc_drivers_sec "drivers" orchestrate complex simulations by controlling \ref main_doc_engines_sec "engines" through the use of an API-like command set that is defined by the \ref mdi_standard "MDI Standard".
The process of communicating commands and other data between codes is handled by the \ref mainpage_overview_sec "MDI Library".

In total, MDI consists of the following components:

  - \ref main_doc_drivers_sec "Drivers", which are codes that control the high-level program flow of one or more other codes.

  - \ref main_doc_engines_sec "Engines", which are codes capable of responding to commands from an external driver.

  - \ref mdi_standard "The MDI Standard", which is an API-like definition of a set of commands that can be sent from a driver to an engine, and that cause the engine to respond in a clearly defined way.

  - \ref library_page "The MDI Library", which is a library that enables inter-code communication in compliance with the MDI Standard.



\section mainpage_capabilities_sec Capabilities

MDI is designed to support a wide variety of different calculation types, with the \ref mdi_standard "MDI Standard" defining a variety of simple commands that can be used to develop many drivers for many purposes.
Potential application areas for MDI include <em> ab initio</em> molecular dynamics (AIMD), path integral molecular dynamics (PIMD), advanced sampling, forcefield development, and QM/MM.
More specifically, here are some examples of what can be accomplished using MDI:

  - Run an <em> ab initio</em> molecular dynamics (AIMD) calculation in which a quantum mechanics (QM) code evaluates nuclear forces and a molecular mechancis (MM) code performs time integration.
  - Run an MD simulation in which the nuclear forces include contributions from two different MM codes.
  - Implement an advanced sampling technique (<em>i.e.</em> metadynamics, replica exchange, etc.) in a self-contained driver that can use other codes to compute forces.
  - Implement a new forcefield in a self-contained engine that is compatible with multiple MM codes.
  - Run QM/MM simulations.

More generally, MDI can support any use case that can be implemented using the \ref command_list "command set" defined by the \ref mdi_standard "MDI Standard".
For use cases that require additional commands, unofficial extensions to the MDI Standard can be straightforwardly developed.
Feel free to contact us if your use case requires additions to the MDI Standard, and we may be able to provide advice about the process.
Extensions that prove useful to the broader community may be considered for official incorporation into the MDI Standard.



\section mainpage_getting_started_sec Getting Started

For guidance on running simulations using MDI-based drivers and engines, please first complete the \ref user_tutorial.
Afterwards, please read \ref library_launching_sec.

If you intend to develop an MDI-based driver or engine, first do the above.
Then, complete the \ref aimd_tutorial and familiarize yourself with the \ref functions_sec.

For lists of available MDI-based drivers and engines, see \ref main_doc_drivers_sec and \ref main_doc_engines_sec.



\section source_sec Source Code

The source code of the MDI library is available at GitHub at https://github.com/MolSSI/MDI_Library

\section main_doc_sec Main Documentation

  - \ref tutorials
    - \ref user_tutorial
    - \ref aimd_tutorial

  - \ref mdi_standard

  - \ref library_page



\section main_doc_engines_sec Engines

The following codes can be directly run as MDI engines:

  - \ref ecosystem_lammps

  - \ref ecosystem_psi4

  - \ref ecosystem_qcengine

  - \ref ecosystem_qe

Through \ref ecosystem_qcengine, it is additionally possible to control the following codes via MDI:

  - \ref <a href="http://www.petachem.com/">PetaChem</a>

  - \ref <a href="https://www.molpro.net/">Molpro</a>

  - \ref <a href="https://github.com/aiqm/torchani">TorchANI</a>

  - \ref <a href="http://rdkit.org/">RDKit</a>

The following codes support <a href="http://ipi-code.org/">i-PI</a>, with which MDI is compatible (see the \ref library_launching_sec "-ipi" option).  Note that the i-PI command set is different from that of the MDI Standard.

  - <a href="https://www.cp2k.org/">CP2K</a>

  - <a href="http://www.dftbplus.org/">DFTB+</a>

  - <a href="https://departments.icmab.es/leem/siesta/">Siesta</a>

  - <a href="https://aimsclub.fhi-berlin.mpg.de/">FHI-aims</a>

  - <a href="http://molmod.github.io/yaff/">Yaff</a>

  - <a href="http://demon-nano.ups-tlse.fr/">deMonNano</a>

  - <a href="https://www.questaal.org/">TBE</a>


\section main_doc_drivers_sec Drivers

  - <a href="https://github.com/MolSSI/MDI_AIMD_Driver">MDI AIMD Driver</a>



\section main_doc_bugs_sec Reporting Bugs, Issues, and Improvements

Bugs and suggestions for improvements can be reported via <a href="https://github.com/MolSSI/MDI_Library/issues">GitHub Issues</a> or by emailing the main author directly.



\section main_doc_author_sec Authors

The MDI Library is primarily written by Taylor Barnes \<tbarnes1@vt.edu\>, a Software Scientist at MolSSI.



\section main_doc_license_sec License

The MDI Library is released under the 3-Clause BSD License. See the LICENSE file for more details.



\section main_doc_ack_sec Acknowledgements

This work was supported by the Molecular Sciences Software Institute under U.S. National Science Foundation grant ACI-1547580.

**/

